basePath: /api/v1
definitions:
  controllers.SafeUser:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      userName:
        type: string
    type: object
  model.Building:
    properties:
      Id:
        type: integer
      city:
        type: string
      creationDateTime:
        type: string
      creatorId:
        type: integer
      name:
        type: string
      region:
        type: string
    type: object
  model.BuildingFloor:
    properties:
      Id:
        type: integer
      buildingId:
        type: integer
      creationDateTime:
        type: string
      creatorId:
        type: integer
      floorName:
        type: string
    type: object
  model.BuildingList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Building'
        type: array
    type: object
  model.BuildingUpdate:
    properties:
      city:
        type: string
      name:
        type: string
      region:
        type: string
    type: object
  model.FailureMsg:
    properties:
      error:
        type: string
    type: object
  model.FloorList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.BuildingFloor'
        type: array
    type: object
  model.FloorUpdate:
    properties:
      buildingId:
        type: integer
      name:
        type: string
    type: object
  model.Location:
    properties:
      Id:
        type: integer
      buildingId:
        type: integer
      creationDateTime:
        type: string
      creatorId:
        type: integer
      floorId:
        type: integer
      location:
        type: string
    type: object
  model.LocationList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Location'
        type: array
    type: object
  model.Panel:
    properties:
      Id:
        type: integer
      approvalDateTime:
        type: string
      approvalStatus:
        type: boolean
      approvedById:
        type: integer
      creationDateTime:
        type: string
      creatorId:
        type: integer
      description:
        type: string
      durationInMinutes:
        type: integer
      location:
        type: string
      panelRequestorEmail:
        type: string
      scheduledTime:
        type: string
      topic:
        type: string
    type: object
  model.PanelList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Panel'
        type: array
    type: object
  model.PasswordChange:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    type: object
  model.ProposedBuilding:
    properties:
      city:
        type: string
      name:
        type: string
      region:
        type: string
    type: object
  model.ProposedFloor:
    properties:
      buildingName:
        type: string
      name:
        type: string
    type: object
  model.ProposedLocation:
    properties:
      buildingId:
        type: integer
      floorId:
        type: integer
      name:
        type: string
    type: object
  model.ProposedUser:
    properties:
      Id:
        type: integer
      password:
        type: string
      status:
        type: string
      userName:
        type: string
    type: object
  model.Schedule:
    properties:
      durationInMinutes:
        type: integer
      startTime:
        type: string
    type: object
  model.SuccessMsg:
    properties:
      message:
        type: string
    type: object
  model.User:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      lastChangedDate:
        type: string
      passwordHash:
        type: string
      status:
        type: string
      userName:
        type: string
    type: object
  model.UserStatusMsg:
    properties:
      message:
        type: string
      userStatus:
        type: string
    type: object
  model.UsersList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
host: localhost:5000
info:
  contact:
    name: Gary Greene
    url: https://github.com/JAFAX/giron-service
  description: An API for managing panel events
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Giron-Service
  version: 0.0.20
paths:
  /building:
    post:
      consumes:
      - application/json
      description: Create a new building
      parameters:
      - description: Building data
        in: body
        name: building
        required: true
        schema:
          $ref: '#/definitions/model.ProposedBuilding'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Create a new building
      tags:
      - buildings
  /building/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a building by Id
      parameters:
      - description: Building Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete a building by Id
      tags:
      - buildings
    get:
      description: Retrieve building by Id
      parameters:
      - description: Building Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Building'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve building by Id
      tags:
      - buildings
    patch:
      description: Update building information
      parameters:
      - description: Building Id
        in: path
        name: id
        required: true
        type: string
      - description: Building data
        in: body
        name: building
        required: true
        schema:
          $ref: '#/definitions/model.BuildingUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Update building information
      tags:
      - buildings
  /buildings:
    get:
      description: Retrieve list of all panels
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BuildingList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve list of all panels
      tags:
      - buildings
  /floor:
    post:
      consumes:
      - application/json
      description: Create a new floor
      parameters:
      - description: Floor data
        in: body
        name: floor
        required: true
        schema:
          $ref: '#/definitions/model.ProposedFloor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Create a new floor
      tags:
      - floors
  /floor/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a floor by Id
      parameters:
      - description: Floor Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete a floor by Id
      tags:
      - floors
    get:
      description: Retrieve floor based on Id
      parameters:
      - description: Floor Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BuildingFloor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve floor based on Id
      tags:
      - floors
    patch:
      description: Update floor information
      parameters:
      - description: Floor Id
        in: path
        name: id
        required: true
        type: string
      - description: Floor data
        in: body
        name: floor
        required: true
        schema:
          $ref: '#/definitions/model.FloorUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Update floor information
      tags:
      - floors
  /floors:
    get:
      description: Retrieve list of all floor records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FloorList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve list of all floor records
      tags:
      - floors
  /floors/buildingId/{id}:
    get:
      description: Retrieve list of all floors based on building Id
      parameters:
      - description: Building Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FloorList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve list of all floors based on building Id
      tags:
      - floors
  /location:
    post:
      consumes:
      - application/json
      description: Create a new location
      parameters:
      - description: Location data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/model.ProposedLocation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Create a new location
      tags:
      - locations
  /location/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a location by Id
      parameters:
      - description: Location Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete a location by Id
      tags:
      - locations
    get:
      description: Retrieve location by Id
      parameters:
      - description: Location Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve location by Id
      tags:
      - locations
  /location/byBuildingId/{id}:
    get:
      description: Retrieve list of locations by building Id
      parameters:
      - description: Building Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LocationList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve list of locations by building Id
      tags:
      - locations
  /location/byFloorId/{id}:
    get:
      description: Retrieve list of locations by floor Id
      parameters:
      - description: Floor Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LocationList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve list of locations by floor Id
      tags:
      - locations
  /locations:
    get:
      description: Retrieve list of all location objects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LocationList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve list of all location objects
      tags:
      - locations
  /panel:
    post:
      consumes:
      - application/json
      description: Create a new panel event
      parameters:
      - description: Panel data
        in: body
        name: panel
        required: true
        schema:
          $ref: '#/definitions/model.Panel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Create a new panel event
      tags:
      - panels
  /panel/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a panel by Id
      parameters:
      - description: Panel Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete a panel by Id
      tags:
      - panels
    get:
      description: Retrieve panel by Id
      parameters:
      - description: Building Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Panel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve panel by Id
      tags:
      - panels
  /panel/{id}/location:
    get:
      description: Retrieve panel location by the panel Id
      parameters:
      - description: Building Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve panel location by the panel Id
      tags:
      - panels
    post:
      description: Set panel location
      parameters:
      - description: Building Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Set panel location
      tags:
      - panels
  /panel/{id}/schedule:
    get:
      description: Retrieve panel schedule by the panel Id
      parameters:
      - description: Building Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve panel schedule by the panel Id
      tags:
      - panels
  /panels:
    get:
      description: Retrieve list of all approved panels
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PanelList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve list of all approved panels
      tags:
      - panels
  /panels/all:
    get:
      description: Retrieve list of all panels
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PanelList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all panels
      tags:
      - panels
  /user:
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.ProposedUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register user
      tags:
      - user
  /user/{name}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Change password
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      - description: Password data
        in: body
        name: changePassword
        required: true
        schema:
          $ref: '#/definitions/model.PasswordChange'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Change password
      tags:
      - user
  /user/{name}/status:
    get:
      consumes:
      - application/json
      description: Retrieve a user's active status
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserStatusMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a user's active status. Can be either 'enabled' or 'locked'
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Set a user's active status
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserStatusMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Set a user's active status. Can be either 'enabled' or 'locked'
      tags:
      - user
  /user/id/{id}:
    get:
      description: Retrieve a user by their Id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SafeUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a user by their Id
      tags:
      - user
  /user/name/{name}:
    get:
      description: Retrieve a user by their UserName
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SafeUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a user by their UserName
      tags:
      - user
  /users:
    get:
      description: Retrieve list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UsersList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve list of all users
      tags:
      - user
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
